// <auto-generated />
using System;
using FrizerskiSalon.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FrizerskiSalon.API.Data.Migrations
{
    [DbContext(typeof(FrizerskiSalonContext))]
    [Migration("20250531114037_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Izvestaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrojRazlicitihKlijenata")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrojTermina")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UkupnaZarada")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Izvestaji");
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Klijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrTel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Klijenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrTel = "+3816600001",
                            Ime = "Miloš",
                            Prezime = "Milić"
                        },
                        new
                        {
                            Id = 2,
                            BrTel = "+38164000770",
                            Ime = "Tatjana",
                            Prezime = "Konstatinović"
                        });
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Radnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrTel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pozicija")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Radnici");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrTel = "+381641234567",
                            Email = "marko.jovanovic@example.com",
                            Ime = "Marko",
                            Pozicija = "Frizer",
                            Prezime = "Jovanović"
                        },
                        new
                        {
                            Id = 2,
                            BrTel = "+381652345678",
                            Email = "ana.petrović@example.com",
                            Ime = "Ana",
                            Pozicija = "Pomoćnik",
                            Prezime = "Petrović"
                        });
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Termin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<int>("KlijentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RadnikID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UslugaID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KlijentID");

                    b.HasIndex("RadnikID");

                    b.HasIndex("UslugaID");

                    b.ToTable("Termini");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentID = 1,
                            RadnikID = 1,
                            Status = "Zakazano",
                            UslugaID = 1
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentID = 2,
                            RadnikID = 2,
                            Status = "Zakazano",
                            UslugaID = 2
                        });
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cena")
                        .HasColumnType("TEXT");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usluge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cena = 600m,
                            Naziv = "Šišanje",
                            Opis = "Skraćivanje kose"
                        },
                        new
                        {
                            Id = 2,
                            Cena = 200m,
                            Naziv = "Brijanje",
                            Opis = "Oblikovanje brade i brkova"
                        });
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Termin", b =>
                {
                    b.HasOne("FrizerskiSalon.API.Entities.Klijent", "Klijent")
                        .WithMany("Termini")
                        .HasForeignKey("KlijentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrizerskiSalon.API.Entities.Radnik", "Radnik")
                        .WithMany("Termini")
                        .HasForeignKey("RadnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrizerskiSalon.API.Entities.Usluga", "Usluga")
                        .WithMany("Termini")
                        .HasForeignKey("UslugaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("Radnik");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Klijent", b =>
                {
                    b.Navigation("Termini");
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Radnik", b =>
                {
                    b.Navigation("Termini");
                });

            modelBuilder.Entity("FrizerskiSalon.API.Entities.Usluga", b =>
                {
                    b.Navigation("Termini");
                });
#pragma warning restore 612, 618
        }
    }
}
